% Ella Schafer ENGR1410-126 2023-1-23
%% problem statement 
%You are studying the properties of tiny spheres generated by an automated process.
% You collect data on a large number of the spheres and record this data in
% the two-row matrix SphereData. 

% Each pair of values (each column) represents the data for a specific sphere. 

% The first row of SphereData contains the diameters of the spheres in millimeters; 
% the second row contains the masses of the corresponding spheres in micrograms. 
% Write a single MATLAB command to achieve eachof the following tasks.

%(a) Create a third row in SphereData that contains the volumes [cubic millimeters] of the 
% corresponding spheres represented in the first two rows of SphereData.

%(b) Create a fourth row in SphereData that contains the specific gravities of 
% the corresponding spheres represented in SphereData.

%(c) Create a column vector DiamData that contains the following information:
%First element: Average diameter of all spheres
%Second element: Minimum diameter of all spheres
%Third element: Maximum diameter of all spheres
%% Housekeeping
clear; clc;
%% Variables to be used
% Inputs
% SphereData - two-row matrix containing
%     row 1 - diameter [mm]
%     row 2 - mass [micrograms]

% Outputs
% SphereData - modified matrix
%     row 3 - volume [mm^3]
%     row 4 - specific gravity (SG) [-]
% DiamData  - column vector containing average, minimum, and maximum diameter

%% Equations

%Density=mass/volume
%Volume of a Sphere=4/3pi*r^3
%Specific Gravity=Density of the object/density of water
%% Inputs
% This generates the input variable, SphereData, with random values which will 
% be used to evaluate your code
SphereData=rand(2,randi([25 50]));
SphereData(1,:)=SphereData(1,:)*0.5+0.5;
SphereData(2,:)=SphereData(2,:)*1000+1000

%% Program
DW=1000 %[kg/m^3] This is the known value of the density of water
%% Part A
% the goal of this part is to add an aditional row containing the volumes
% of individual spheres

SphereData=[SphereData;(4/3*pi*((SphereData(1:2:end)/2).^3))] % This adds a volume [mm^3] column to the matrix

%Explanation of Part A
%First SphereData is added to the updated SphereData matirx to include all
%previous values. Then a semicolon that indicates a seperation of rows is
%added before the volume to seperate it's row. The volume is calculated by
%multiplying 4/3*pi*Radius^3. To isolate the radius from the sets of values
%a range of values is taken from the first to last variable, with a counter
%of 2 in order to skip over the mass row for the spheres. It is then
%divided by 2 to get the radius that is then cubed to get R^3. 

%% Part B

% the goal of this part is to add an aditional row containing the Specific
% Gravities of individual spheres

SphereData=[SphereData;(SphereData(2:3:end)/10^9./SphereData(3:3:end)*1000^3/DW)] 

%Explanation of Part B
%First there is an addition of SphereData to the updated SphereData matrix
%in order to retain previous values. Then a row is created to house SG by
%adding a semicolon. Then the values of mass [ug] were converted into the
%SI unit Kg and the volume [mm^3] was converted into the SI unit [m^3],
%this could then be divided by the density of water "DW" leaving the SG
%unitless. This all stores in the fourth row of the SphereData matrix

%% Part C

%the goal of this is to create a vector carrying the average, max and min
%of the spheres

DiamData=[mean(SphereData(1:4:end));min(SphereData(1:4:end));max(SphereData(1:4:end))] %[mm]

%Explanation of Part C
% The first value of DiamData is the mean of the diameters, calculated by
% isolating the row with diameters and then using the mean command to
% select the mean of that vector. Then the min of the diameters was
% calculated by isolating the diameter row and then finding the min of the
% selection, the same thing was then done with the max of the diameters.

